// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/thanawat/app/ent/problem"
	"github.com/thanawat/app/ent/problemstatus"
	"github.com/thanawat/app/ent/problemtitle"
	"github.com/thanawat/app/ent/room"
	"github.com/thanawat/app/ent/user"
)

// Problem is the model entity for the Problem schema.
type Problem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Probleminfo holds the value of the "probleminfo" field.
	Probleminfo string `json:"probleminfo,omitempty"`
	// Adddate holds the value of the "adddate" field.
	Adddate time.Time `json:"adddate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProblemQuery when eager-loading is set.
	Edges         ProblemEdges `json:"edges"`
	problemstatus *int
	problemtitle  *int
	room_id       *int
	user_id       *int
}

// ProblemEdges holds the relations/edges for other nodes in the graph.
type ProblemEdges struct {
	// User holds the value of the user edge.
	User *User
	// Room holds the value of the room edge.
	Room *Room
	// Problemtitle holds the value of the problemtitle edge.
	Problemtitle *ProblemTitle
	// Problemstatus holds the value of the problemstatus edge.
	Problemstatus *ProblemStatus
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProblemEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProblemEdges) RoomOrErr() (*Room, error) {
	if e.loadedTypes[1] {
		if e.Room == nil {
			// The edge room was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: room.Label}
		}
		return e.Room, nil
	}
	return nil, &NotLoadedError{edge: "room"}
}

// ProblemtitleOrErr returns the Problemtitle value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProblemEdges) ProblemtitleOrErr() (*ProblemTitle, error) {
	if e.loadedTypes[2] {
		if e.Problemtitle == nil {
			// The edge problemtitle was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: problemtitle.Label}
		}
		return e.Problemtitle, nil
	}
	return nil, &NotLoadedError{edge: "problemtitle"}
}

// ProblemstatusOrErr returns the Problemstatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProblemEdges) ProblemstatusOrErr() (*ProblemStatus, error) {
	if e.loadedTypes[3] {
		if e.Problemstatus == nil {
			// The edge problemstatus was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: problemstatus.Label}
		}
		return e.Problemstatus, nil
	}
	return nil, &NotLoadedError{edge: "problemstatus"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Problem) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // probleminfo
		&sql.NullTime{},   // adddate
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Problem) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // problemstatus
		&sql.NullInt64{}, // problemtitle
		&sql.NullInt64{}, // room_id
		&sql.NullInt64{}, // user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Problem fields.
func (pr *Problem) assignValues(values ...interface{}) error {
	if m, n := len(values), len(problem.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field probleminfo", values[0])
	} else if value.Valid {
		pr.Probleminfo = value.String
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field adddate", values[1])
	} else if value.Valid {
		pr.Adddate = value.Time
	}
	values = values[2:]
	if len(values) == len(problem.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field problemstatus", value)
		} else if value.Valid {
			pr.problemstatus = new(int)
			*pr.problemstatus = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field problemtitle", value)
		} else if value.Valid {
			pr.problemtitle = new(int)
			*pr.problemtitle = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_id", value)
		} else if value.Valid {
			pr.room_id = new(int)
			*pr.room_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_id", value)
		} else if value.Valid {
			pr.user_id = new(int)
			*pr.user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the Problem.
func (pr *Problem) QueryUser() *UserQuery {
	return (&ProblemClient{config: pr.config}).QueryUser(pr)
}

// QueryRoom queries the room edge of the Problem.
func (pr *Problem) QueryRoom() *RoomQuery {
	return (&ProblemClient{config: pr.config}).QueryRoom(pr)
}

// QueryProblemtitle queries the problemtitle edge of the Problem.
func (pr *Problem) QueryProblemtitle() *ProblemTitleQuery {
	return (&ProblemClient{config: pr.config}).QueryProblemtitle(pr)
}

// QueryProblemstatus queries the problemstatus edge of the Problem.
func (pr *Problem) QueryProblemstatus() *ProblemStatusQuery {
	return (&ProblemClient{config: pr.config}).QueryProblemstatus(pr)
}

// Update returns a builder for updating this Problem.
// Note that, you need to call Problem.Unwrap() before calling this method, if this Problem
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Problem) Update() *ProblemUpdateOne {
	return (&ProblemClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Problem) Unwrap() *Problem {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Problem is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Problem) String() string {
	var builder strings.Builder
	builder.WriteString("Problem(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", probleminfo=")
	builder.WriteString(pr.Probleminfo)
	builder.WriteString(", adddate=")
	builder.WriteString(pr.Adddate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Problems is a parsable slice of Problem.
type Problems []*Problem

func (pr Problems) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
