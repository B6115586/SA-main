// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/thanawat/app/ent/predicate"
	"github.com/thanawat/app/ent/problem"
	"github.com/thanawat/app/ent/problemstatus"
)

// ProblemStatusUpdate is the builder for updating ProblemStatus entities.
type ProblemStatusUpdate struct {
	config
	hooks      []Hook
	mutation   *ProblemStatusMutation
	predicates []predicate.ProblemStatus
}

// Where adds a new predicate for the builder.
func (psu *ProblemStatusUpdate) Where(ps ...predicate.ProblemStatus) *ProblemStatusUpdate {
	psu.predicates = append(psu.predicates, ps...)
	return psu
}

// SetProblemstatus sets the problemstatus field.
func (psu *ProblemStatusUpdate) SetProblemstatus(s string) *ProblemStatusUpdate {
	psu.mutation.SetProblemstatus(s)
	return psu
}

// AddProblemstatus2problemIDs adds the problemstatus2problem edge to Problem by ids.
func (psu *ProblemStatusUpdate) AddProblemstatus2problemIDs(ids ...int) *ProblemStatusUpdate {
	psu.mutation.AddProblemstatus2problemIDs(ids...)
	return psu
}

// AddProblemstatus2problem adds the problemstatus2problem edges to Problem.
func (psu *ProblemStatusUpdate) AddProblemstatus2problem(p ...*Problem) *ProblemStatusUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddProblemstatus2problemIDs(ids...)
}

// Mutation returns the ProblemStatusMutation object of the builder.
func (psu *ProblemStatusUpdate) Mutation() *ProblemStatusMutation {
	return psu.mutation
}

// RemoveProblemstatus2problemIDs removes the problemstatus2problem edge to Problem by ids.
func (psu *ProblemStatusUpdate) RemoveProblemstatus2problemIDs(ids ...int) *ProblemStatusUpdate {
	psu.mutation.RemoveProblemstatus2problemIDs(ids...)
	return psu
}

// RemoveProblemstatus2problem removes problemstatus2problem edges to Problem.
func (psu *ProblemStatusUpdate) RemoveProblemstatus2problem(p ...*Problem) *ProblemStatusUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemoveProblemstatus2problemIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (psu *ProblemStatusUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := psu.mutation.Problemstatus(); ok {
		if err := problemstatus.ProblemstatusValidator(v); err != nil {
			return 0, &ValidationError{Name: "problemstatus", err: fmt.Errorf("ent: validator failed for field \"problemstatus\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(psu.hooks) == 0 {
		affected, err = psu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProblemStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			psu.mutation = mutation
			affected, err = psu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(psu.hooks) - 1; i >= 0; i-- {
			mut = psu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (psu *ProblemStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *ProblemStatusUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *ProblemStatusUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psu *ProblemStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   problemstatus.Table,
			Columns: problemstatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: problemstatus.FieldID,
			},
		},
	}
	if ps := psu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.Problemstatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: problemstatus.FieldProblemstatus,
		})
	}
	if nodes := psu.mutation.RemovedProblemstatus2problemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problemstatus.Problemstatus2problemTable,
			Columns: []string{problemstatus.Problemstatus2problemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: problem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.Problemstatus2problemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problemstatus.Problemstatus2problemTable,
			Columns: []string{problemstatus.Problemstatus2problemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: problem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problemstatus.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProblemStatusUpdateOne is the builder for updating a single ProblemStatus entity.
type ProblemStatusUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProblemStatusMutation
}

// SetProblemstatus sets the problemstatus field.
func (psuo *ProblemStatusUpdateOne) SetProblemstatus(s string) *ProblemStatusUpdateOne {
	psuo.mutation.SetProblemstatus(s)
	return psuo
}

// AddProblemstatus2problemIDs adds the problemstatus2problem edge to Problem by ids.
func (psuo *ProblemStatusUpdateOne) AddProblemstatus2problemIDs(ids ...int) *ProblemStatusUpdateOne {
	psuo.mutation.AddProblemstatus2problemIDs(ids...)
	return psuo
}

// AddProblemstatus2problem adds the problemstatus2problem edges to Problem.
func (psuo *ProblemStatusUpdateOne) AddProblemstatus2problem(p ...*Problem) *ProblemStatusUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddProblemstatus2problemIDs(ids...)
}

// Mutation returns the ProblemStatusMutation object of the builder.
func (psuo *ProblemStatusUpdateOne) Mutation() *ProblemStatusMutation {
	return psuo.mutation
}

// RemoveProblemstatus2problemIDs removes the problemstatus2problem edge to Problem by ids.
func (psuo *ProblemStatusUpdateOne) RemoveProblemstatus2problemIDs(ids ...int) *ProblemStatusUpdateOne {
	psuo.mutation.RemoveProblemstatus2problemIDs(ids...)
	return psuo
}

// RemoveProblemstatus2problem removes problemstatus2problem edges to Problem.
func (psuo *ProblemStatusUpdateOne) RemoveProblemstatus2problem(p ...*Problem) *ProblemStatusUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemoveProblemstatus2problemIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (psuo *ProblemStatusUpdateOne) Save(ctx context.Context) (*ProblemStatus, error) {
	if v, ok := psuo.mutation.Problemstatus(); ok {
		if err := problemstatus.ProblemstatusValidator(v); err != nil {
			return nil, &ValidationError{Name: "problemstatus", err: fmt.Errorf("ent: validator failed for field \"problemstatus\": %w", err)}
		}
	}

	var (
		err  error
		node *ProblemStatus
	)
	if len(psuo.hooks) == 0 {
		node, err = psuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProblemStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			psuo.mutation = mutation
			node, err = psuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(psuo.hooks) - 1; i >= 0; i-- {
			mut = psuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *ProblemStatusUpdateOne) SaveX(ctx context.Context) *ProblemStatus {
	ps, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ps
}

// Exec executes the query on the entity.
func (psuo *ProblemStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *ProblemStatusUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psuo *ProblemStatusUpdateOne) sqlSave(ctx context.Context) (ps *ProblemStatus, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   problemstatus.Table,
			Columns: problemstatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: problemstatus.FieldID,
			},
		},
	}
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProblemStatus.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := psuo.mutation.Problemstatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: problemstatus.FieldProblemstatus,
		})
	}
	if nodes := psuo.mutation.RemovedProblemstatus2problemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problemstatus.Problemstatus2problemTable,
			Columns: []string{problemstatus.Problemstatus2problemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: problem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.Problemstatus2problemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problemstatus.Problemstatus2problemTable,
			Columns: []string{problemstatus.Problemstatus2problemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: problem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	ps = &ProblemStatus{config: psuo.config}
	_spec.Assign = ps.assignValues
	_spec.ScanValues = ps.scanValues()
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problemstatus.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ps, nil
}
