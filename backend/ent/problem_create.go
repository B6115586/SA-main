// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/thanawat/app/ent/problem"
	"github.com/thanawat/app/ent/problemstatus"
	"github.com/thanawat/app/ent/problemtitle"
	"github.com/thanawat/app/ent/room"
	"github.com/thanawat/app/ent/user"
)

// ProblemCreate is the builder for creating a Problem entity.
type ProblemCreate struct {
	config
	mutation *ProblemMutation
	hooks    []Hook
}

// SetProbleminfo sets the probleminfo field.
func (pc *ProblemCreate) SetProbleminfo(s string) *ProblemCreate {
	pc.mutation.SetProbleminfo(s)
	return pc
}

// SetAdddate sets the adddate field.
func (pc *ProblemCreate) SetAdddate(t time.Time) *ProblemCreate {
	pc.mutation.SetAdddate(t)
	return pc
}

// SetUserID sets the user edge to User by id.
func (pc *ProblemCreate) SetUserID(id int) *ProblemCreate {
	pc.mutation.SetUserID(id)
	return pc
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (pc *ProblemCreate) SetNillableUserID(id *int) *ProblemCreate {
	if id != nil {
		pc = pc.SetUserID(*id)
	}
	return pc
}

// SetUser sets the user edge to User.
func (pc *ProblemCreate) SetUser(u *User) *ProblemCreate {
	return pc.SetUserID(u.ID)
}

// SetRoomID sets the room edge to Room by id.
func (pc *ProblemCreate) SetRoomID(id int) *ProblemCreate {
	pc.mutation.SetRoomID(id)
	return pc
}

// SetNillableRoomID sets the room edge to Room by id if the given value is not nil.
func (pc *ProblemCreate) SetNillableRoomID(id *int) *ProblemCreate {
	if id != nil {
		pc = pc.SetRoomID(*id)
	}
	return pc
}

// SetRoom sets the room edge to Room.
func (pc *ProblemCreate) SetRoom(r *Room) *ProblemCreate {
	return pc.SetRoomID(r.ID)
}

// SetProblemtitleID sets the problemtitle edge to ProblemTitle by id.
func (pc *ProblemCreate) SetProblemtitleID(id int) *ProblemCreate {
	pc.mutation.SetProblemtitleID(id)
	return pc
}

// SetNillableProblemtitleID sets the problemtitle edge to ProblemTitle by id if the given value is not nil.
func (pc *ProblemCreate) SetNillableProblemtitleID(id *int) *ProblemCreate {
	if id != nil {
		pc = pc.SetProblemtitleID(*id)
	}
	return pc
}

// SetProblemtitle sets the problemtitle edge to ProblemTitle.
func (pc *ProblemCreate) SetProblemtitle(p *ProblemTitle) *ProblemCreate {
	return pc.SetProblemtitleID(p.ID)
}

// SetProblemstatusID sets the problemstatus edge to ProblemStatus by id.
func (pc *ProblemCreate) SetProblemstatusID(id int) *ProblemCreate {
	pc.mutation.SetProblemstatusID(id)
	return pc
}

// SetNillableProblemstatusID sets the problemstatus edge to ProblemStatus by id if the given value is not nil.
func (pc *ProblemCreate) SetNillableProblemstatusID(id *int) *ProblemCreate {
	if id != nil {
		pc = pc.SetProblemstatusID(*id)
	}
	return pc
}

// SetProblemstatus sets the problemstatus edge to ProblemStatus.
func (pc *ProblemCreate) SetProblemstatus(p *ProblemStatus) *ProblemCreate {
	return pc.SetProblemstatusID(p.ID)
}

// Mutation returns the ProblemMutation object of the builder.
func (pc *ProblemCreate) Mutation() *ProblemMutation {
	return pc.mutation
}

// Save creates the Problem in the database.
func (pc *ProblemCreate) Save(ctx context.Context) (*Problem, error) {
	if _, ok := pc.mutation.Probleminfo(); !ok {
		return nil, &ValidationError{Name: "probleminfo", err: errors.New("ent: missing required field \"probleminfo\"")}
	}
	if v, ok := pc.mutation.Probleminfo(); ok {
		if err := problem.ProbleminfoValidator(v); err != nil {
			return nil, &ValidationError{Name: "probleminfo", err: fmt.Errorf("ent: validator failed for field \"probleminfo\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Adddate(); !ok {
		return nil, &ValidationError{Name: "adddate", err: errors.New("ent: missing required field \"adddate\"")}
	}
	var (
		err  error
		node *Problem
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProblemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProblemCreate) SaveX(ctx context.Context) *Problem {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *ProblemCreate) sqlSave(ctx context.Context) (*Problem, error) {
	pr, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}

func (pc *ProblemCreate) createSpec() (*Problem, *sqlgraph.CreateSpec) {
	var (
		pr    = &Problem{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: problem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: problem.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Probleminfo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: problem.FieldProbleminfo,
		})
		pr.Probleminfo = value
	}
	if value, ok := pc.mutation.Adddate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: problem.FieldAdddate,
		})
		pr.Adddate = value
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.UserTable,
			Columns: []string{problem.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.RoomTable,
			Columns: []string{problem.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProblemtitleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.ProblemtitleTable,
			Columns: []string{problem.ProblemtitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: problemtitle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProblemstatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.ProblemstatusTable,
			Columns: []string{problem.ProblemstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: problemstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pr, _spec
}
