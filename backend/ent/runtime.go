// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/thanawat/app/ent/problem"
	"github.com/thanawat/app/ent/problemstatus"
	"github.com/thanawat/app/ent/problemtitle"
	"github.com/thanawat/app/ent/schema"
	"github.com/thanawat/app/ent/user"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	problemFields := schema.Problem{}.Fields()
	_ = problemFields
	// problemDescProbleminfo is the schema descriptor for probleminfo field.
	problemDescProbleminfo := problemFields[0].Descriptor()
	// problem.ProbleminfoValidator is a validator for the "probleminfo" field. It is called by the builders before save.
	problem.ProbleminfoValidator = problemDescProbleminfo.Validators[0].(func(string) error)
	problemstatusFields := schema.ProblemStatus{}.Fields()
	_ = problemstatusFields
	// problemstatusDescProblemstatus is the schema descriptor for problemstatus field.
	problemstatusDescProblemstatus := problemstatusFields[0].Descriptor()
	// problemstatus.ProblemstatusValidator is a validator for the "problemstatus" field. It is called by the builders before save.
	problemstatus.ProblemstatusValidator = problemstatusDescProblemstatus.Validators[0].(func(string) error)
	problemtitleFields := schema.ProblemTitle{}.Fields()
	_ = problemtitleFields
	// problemtitleDescProblemtitle is the schema descriptor for problemtitle field.
	problemtitleDescProblemtitle := problemtitleFields[0].Descriptor()
	// problemtitle.ProblemtitleValidator is a validator for the "problemtitle" field. It is called by the builders before save.
	problemtitle.ProblemtitleValidator = problemtitleDescProblemtitle.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
}
