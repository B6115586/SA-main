// Code generated by entc, DO NOT EDIT.

package problemstatus

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/thanawat/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Problemstatus applies equality check predicate on the "problemstatus" field. It's identical to ProblemstatusEQ.
func Problemstatus(v string) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProblemstatus), v))
	})
}

// ProblemstatusEQ applies the EQ predicate on the "problemstatus" field.
func ProblemstatusEQ(v string) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProblemstatus), v))
	})
}

// ProblemstatusNEQ applies the NEQ predicate on the "problemstatus" field.
func ProblemstatusNEQ(v string) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProblemstatus), v))
	})
}

// ProblemstatusIn applies the In predicate on the "problemstatus" field.
func ProblemstatusIn(vs ...string) predicate.ProblemStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProblemStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProblemstatus), v...))
	})
}

// ProblemstatusNotIn applies the NotIn predicate on the "problemstatus" field.
func ProblemstatusNotIn(vs ...string) predicate.ProblemStatus {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProblemStatus(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProblemstatus), v...))
	})
}

// ProblemstatusGT applies the GT predicate on the "problemstatus" field.
func ProblemstatusGT(v string) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProblemstatus), v))
	})
}

// ProblemstatusGTE applies the GTE predicate on the "problemstatus" field.
func ProblemstatusGTE(v string) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProblemstatus), v))
	})
}

// ProblemstatusLT applies the LT predicate on the "problemstatus" field.
func ProblemstatusLT(v string) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProblemstatus), v))
	})
}

// ProblemstatusLTE applies the LTE predicate on the "problemstatus" field.
func ProblemstatusLTE(v string) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProblemstatus), v))
	})
}

// ProblemstatusContains applies the Contains predicate on the "problemstatus" field.
func ProblemstatusContains(v string) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProblemstatus), v))
	})
}

// ProblemstatusHasPrefix applies the HasPrefix predicate on the "problemstatus" field.
func ProblemstatusHasPrefix(v string) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProblemstatus), v))
	})
}

// ProblemstatusHasSuffix applies the HasSuffix predicate on the "problemstatus" field.
func ProblemstatusHasSuffix(v string) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProblemstatus), v))
	})
}

// ProblemstatusEqualFold applies the EqualFold predicate on the "problemstatus" field.
func ProblemstatusEqualFold(v string) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProblemstatus), v))
	})
}

// ProblemstatusContainsFold applies the ContainsFold predicate on the "problemstatus" field.
func ProblemstatusContainsFold(v string) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProblemstatus), v))
	})
}

// HasProblemstatus2problem applies the HasEdge predicate on the "problemstatus2problem" edge.
func HasProblemstatus2problem() predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Problemstatus2problemTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, Problemstatus2problemTable, Problemstatus2problemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProblemstatus2problemWith applies the HasEdge predicate on the "problemstatus2problem" edge with a given conditions (other predicates).
func HasProblemstatus2problemWith(preds ...predicate.Problem) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Problemstatus2problemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, Problemstatus2problemTable, Problemstatus2problemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.ProblemStatus) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.ProblemStatus) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProblemStatus) predicate.ProblemStatus {
	return predicate.ProblemStatus(func(s *sql.Selector) {
		p(s.Not())
	})
}
