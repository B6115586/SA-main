// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/thanawat/app/ent/problemtitle"
)

// ProblemTitle is the model entity for the ProblemTitle schema.
type ProblemTitle struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Problemtitle holds the value of the "problemtitle" field.
	Problemtitle string `json:"problemtitle,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProblemTitleQuery when eager-loading is set.
	Edges ProblemTitleEdges `json:"edges"`
}

// ProblemTitleEdges holds the relations/edges for other nodes in the graph.
type ProblemTitleEdges struct {
	// Problemtitle2problem holds the value of the problemtitle2problem edge.
	Problemtitle2problem []*Problem
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// Problemtitle2problemOrErr returns the Problemtitle2problem value or an error if the edge
// was not loaded in eager-loading.
func (e ProblemTitleEdges) Problemtitle2problemOrErr() ([]*Problem, error) {
	if e.loadedTypes[0] {
		return e.Problemtitle2problem, nil
	}
	return nil, &NotLoadedError{edge: "problemtitle2problem"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProblemTitle) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // problemtitle
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProblemTitle fields.
func (pt *ProblemTitle) assignValues(values ...interface{}) error {
	if m, n := len(values), len(problemtitle.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pt.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field problemtitle", values[0])
	} else if value.Valid {
		pt.Problemtitle = value.String
	}
	return nil
}

// QueryProblemtitle2problem queries the problemtitle2problem edge of the ProblemTitle.
func (pt *ProblemTitle) QueryProblemtitle2problem() *ProblemQuery {
	return (&ProblemTitleClient{config: pt.config}).QueryProblemtitle2problem(pt)
}

// Update returns a builder for updating this ProblemTitle.
// Note that, you need to call ProblemTitle.Unwrap() before calling this method, if this ProblemTitle
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *ProblemTitle) Update() *ProblemTitleUpdateOne {
	return (&ProblemTitleClient{config: pt.config}).UpdateOne(pt)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pt *ProblemTitle) Unwrap() *ProblemTitle {
	tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProblemTitle is not a transactional entity")
	}
	pt.config.driver = tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *ProblemTitle) String() string {
	var builder strings.Builder
	builder.WriteString("ProblemTitle(")
	builder.WriteString(fmt.Sprintf("id=%v", pt.ID))
	builder.WriteString(", problemtitle=")
	builder.WriteString(pt.Problemtitle)
	builder.WriteByte(')')
	return builder.String()
}

// ProblemTitles is a parsable slice of ProblemTitle.
type ProblemTitles []*ProblemTitle

func (pt ProblemTitles) config(cfg config) {
	for _i := range pt {
		pt[_i].config = cfg
	}
}
