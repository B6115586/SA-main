// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/thanawat/app/ent/problemstatus"
)

// ProblemStatus is the model entity for the ProblemStatus schema.
type ProblemStatus struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Problemstatus holds the value of the "problemstatus" field.
	Problemstatus string `json:"problemstatus,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProblemStatusQuery when eager-loading is set.
	Edges ProblemStatusEdges `json:"edges"`
}

// ProblemStatusEdges holds the relations/edges for other nodes in the graph.
type ProblemStatusEdges struct {
	// Problemstatus2problem holds the value of the problemstatus2problem edge.
	Problemstatus2problem []*Problem
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// Problemstatus2problemOrErr returns the Problemstatus2problem value or an error if the edge
// was not loaded in eager-loading.
func (e ProblemStatusEdges) Problemstatus2problemOrErr() ([]*Problem, error) {
	if e.loadedTypes[0] {
		return e.Problemstatus2problem, nil
	}
	return nil, &NotLoadedError{edge: "problemstatus2problem"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProblemStatus) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // problemstatus
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProblemStatus fields.
func (ps *ProblemStatus) assignValues(values ...interface{}) error {
	if m, n := len(values), len(problemstatus.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ps.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field problemstatus", values[0])
	} else if value.Valid {
		ps.Problemstatus = value.String
	}
	return nil
}

// QueryProblemstatus2problem queries the problemstatus2problem edge of the ProblemStatus.
func (ps *ProblemStatus) QueryProblemstatus2problem() *ProblemQuery {
	return (&ProblemStatusClient{config: ps.config}).QueryProblemstatus2problem(ps)
}

// Update returns a builder for updating this ProblemStatus.
// Note that, you need to call ProblemStatus.Unwrap() before calling this method, if this ProblemStatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *ProblemStatus) Update() *ProblemStatusUpdateOne {
	return (&ProblemStatusClient{config: ps.config}).UpdateOne(ps)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ps *ProblemStatus) Unwrap() *ProblemStatus {
	tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProblemStatus is not a transactional entity")
	}
	ps.config.driver = tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *ProblemStatus) String() string {
	var builder strings.Builder
	builder.WriteString("ProblemStatus(")
	builder.WriteString(fmt.Sprintf("id=%v", ps.ID))
	builder.WriteString(", problemstatus=")
	builder.WriteString(ps.Problemstatus)
	builder.WriteByte(')')
	return builder.String()
}

// ProblemStatusSlice is a parsable slice of ProblemStatus.
type ProblemStatusSlice []*ProblemStatus

func (ps ProblemStatusSlice) config(cfg config) {
	for _i := range ps {
		ps[_i].config = cfg
	}
}
