// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/thanawat/app/ent/problem"
	"github.com/thanawat/app/ent/problemstatus"
	"github.com/thanawat/app/ent/problemtitle"
	"github.com/thanawat/app/ent/room"
	"github.com/thanawat/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeProblem       = "Problem"
	TypeProblemStatus = "ProblemStatus"
	TypeProblemTitle  = "ProblemTitle"
	TypeRoom          = "Room"
	TypeUser          = "User"
)

// ProblemMutation represents an operation that mutate the Problems
// nodes in the graph.
type ProblemMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	probleminfo          *string
	adddate              *time.Time
	clearedFields        map[string]struct{}
	user                 *int
	cleareduser          bool
	room                 *int
	clearedroom          bool
	problemtitle         *int
	clearedproblemtitle  bool
	problemstatus        *int
	clearedproblemstatus bool
	done                 bool
	oldValue             func(context.Context) (*Problem, error)
}

var _ ent.Mutation = (*ProblemMutation)(nil)

// problemOption allows to manage the mutation configuration using functional options.
type problemOption func(*ProblemMutation)

// newProblemMutation creates new mutation for $n.Name.
func newProblemMutation(c config, op Op, opts ...problemOption) *ProblemMutation {
	m := &ProblemMutation{
		config:        c,
		op:            op,
		typ:           TypeProblem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProblemID sets the id field of the mutation.
func withProblemID(id int) problemOption {
	return func(m *ProblemMutation) {
		var (
			err   error
			once  sync.Once
			value *Problem
		)
		m.oldValue = func(ctx context.Context) (*Problem, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Problem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProblem sets the old Problem of the mutation.
func withProblem(node *Problem) problemOption {
	return func(m *ProblemMutation) {
		m.oldValue = func(context.Context) (*Problem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProblemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProblemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ProblemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetProbleminfo sets the probleminfo field.
func (m *ProblemMutation) SetProbleminfo(s string) {
	m.probleminfo = &s
}

// Probleminfo returns the probleminfo value in the mutation.
func (m *ProblemMutation) Probleminfo() (r string, exists bool) {
	v := m.probleminfo
	if v == nil {
		return
	}
	return *v, true
}

// OldProbleminfo returns the old probleminfo value of the Problem.
// If the Problem object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProblemMutation) OldProbleminfo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProbleminfo is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProbleminfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProbleminfo: %w", err)
	}
	return oldValue.Probleminfo, nil
}

// ResetProbleminfo reset all changes of the "probleminfo" field.
func (m *ProblemMutation) ResetProbleminfo() {
	m.probleminfo = nil
}

// SetAdddate sets the adddate field.
func (m *ProblemMutation) SetAdddate(t time.Time) {
	m.adddate = &t
}

// Adddate returns the adddate value in the mutation.
func (m *ProblemMutation) Adddate() (r time.Time, exists bool) {
	v := m.adddate
	if v == nil {
		return
	}
	return *v, true
}

// OldAdddate returns the old adddate value of the Problem.
// If the Problem object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProblemMutation) OldAdddate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAdddate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAdddate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdddate: %w", err)
	}
	return oldValue.Adddate, nil
}

// ResetAdddate reset all changes of the "adddate" field.
func (m *ProblemMutation) ResetAdddate() {
	m.adddate = nil
}

// SetUserID sets the user edge to User by id.
func (m *ProblemMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *ProblemMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *ProblemMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *ProblemMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ProblemMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *ProblemMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetRoomID sets the room edge to Room by id.
func (m *ProblemMutation) SetRoomID(id int) {
	m.room = &id
}

// ClearRoom clears the room edge to Room.
func (m *ProblemMutation) ClearRoom() {
	m.clearedroom = true
}

// RoomCleared returns if the edge room was cleared.
func (m *ProblemMutation) RoomCleared() bool {
	return m.clearedroom
}

// RoomID returns the room id in the mutation.
func (m *ProblemMutation) RoomID() (id int, exists bool) {
	if m.room != nil {
		return *m.room, true
	}
	return
}

// RoomIDs returns the room ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RoomID instead. It exists only for internal usage by the builders.
func (m *ProblemMutation) RoomIDs() (ids []int) {
	if id := m.room; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoom reset all changes of the "room" edge.
func (m *ProblemMutation) ResetRoom() {
	m.room = nil
	m.clearedroom = false
}

// SetProblemtitleID sets the problemtitle edge to ProblemTitle by id.
func (m *ProblemMutation) SetProblemtitleID(id int) {
	m.problemtitle = &id
}

// ClearProblemtitle clears the problemtitle edge to ProblemTitle.
func (m *ProblemMutation) ClearProblemtitle() {
	m.clearedproblemtitle = true
}

// ProblemtitleCleared returns if the edge problemtitle was cleared.
func (m *ProblemMutation) ProblemtitleCleared() bool {
	return m.clearedproblemtitle
}

// ProblemtitleID returns the problemtitle id in the mutation.
func (m *ProblemMutation) ProblemtitleID() (id int, exists bool) {
	if m.problemtitle != nil {
		return *m.problemtitle, true
	}
	return
}

// ProblemtitleIDs returns the problemtitle ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ProblemtitleID instead. It exists only for internal usage by the builders.
func (m *ProblemMutation) ProblemtitleIDs() (ids []int) {
	if id := m.problemtitle; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProblemtitle reset all changes of the "problemtitle" edge.
func (m *ProblemMutation) ResetProblemtitle() {
	m.problemtitle = nil
	m.clearedproblemtitle = false
}

// SetProblemstatusID sets the problemstatus edge to ProblemStatus by id.
func (m *ProblemMutation) SetProblemstatusID(id int) {
	m.problemstatus = &id
}

// ClearProblemstatus clears the problemstatus edge to ProblemStatus.
func (m *ProblemMutation) ClearProblemstatus() {
	m.clearedproblemstatus = true
}

// ProblemstatusCleared returns if the edge problemstatus was cleared.
func (m *ProblemMutation) ProblemstatusCleared() bool {
	return m.clearedproblemstatus
}

// ProblemstatusID returns the problemstatus id in the mutation.
func (m *ProblemMutation) ProblemstatusID() (id int, exists bool) {
	if m.problemstatus != nil {
		return *m.problemstatus, true
	}
	return
}

// ProblemstatusIDs returns the problemstatus ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ProblemstatusID instead. It exists only for internal usage by the builders.
func (m *ProblemMutation) ProblemstatusIDs() (ids []int) {
	if id := m.problemstatus; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProblemstatus reset all changes of the "problemstatus" edge.
func (m *ProblemMutation) ResetProblemstatus() {
	m.problemstatus = nil
	m.clearedproblemstatus = false
}

// Op returns the operation name.
func (m *ProblemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Problem).
func (m *ProblemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ProblemMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.probleminfo != nil {
		fields = append(fields, problem.FieldProbleminfo)
	}
	if m.adddate != nil {
		fields = append(fields, problem.FieldAdddate)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ProblemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case problem.FieldProbleminfo:
		return m.Probleminfo()
	case problem.FieldAdddate:
		return m.Adddate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ProblemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case problem.FieldProbleminfo:
		return m.OldProbleminfo(ctx)
	case problem.FieldAdddate:
		return m.OldAdddate(ctx)
	}
	return nil, fmt.Errorf("unknown Problem field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProblemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case problem.FieldProbleminfo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProbleminfo(v)
		return nil
	case problem.FieldAdddate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdddate(v)
		return nil
	}
	return fmt.Errorf("unknown Problem field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ProblemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ProblemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProblemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Problem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ProblemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ProblemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProblemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Problem nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ProblemMutation) ResetField(name string) error {
	switch name {
	case problem.FieldProbleminfo:
		m.ResetProbleminfo()
		return nil
	case problem.FieldAdddate:
		m.ResetAdddate()
		return nil
	}
	return fmt.Errorf("unknown Problem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ProblemMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.user != nil {
		edges = append(edges, problem.EdgeUser)
	}
	if m.room != nil {
		edges = append(edges, problem.EdgeRoom)
	}
	if m.problemtitle != nil {
		edges = append(edges, problem.EdgeProblemtitle)
	}
	if m.problemstatus != nil {
		edges = append(edges, problem.EdgeProblemstatus)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ProblemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case problem.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case problem.EdgeRoom:
		if id := m.room; id != nil {
			return []ent.Value{*id}
		}
	case problem.EdgeProblemtitle:
		if id := m.problemtitle; id != nil {
			return []ent.Value{*id}
		}
	case problem.EdgeProblemstatus:
		if id := m.problemstatus; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ProblemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ProblemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ProblemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareduser {
		edges = append(edges, problem.EdgeUser)
	}
	if m.clearedroom {
		edges = append(edges, problem.EdgeRoom)
	}
	if m.clearedproblemtitle {
		edges = append(edges, problem.EdgeProblemtitle)
	}
	if m.clearedproblemstatus {
		edges = append(edges, problem.EdgeProblemstatus)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ProblemMutation) EdgeCleared(name string) bool {
	switch name {
	case problem.EdgeUser:
		return m.cleareduser
	case problem.EdgeRoom:
		return m.clearedroom
	case problem.EdgeProblemtitle:
		return m.clearedproblemtitle
	case problem.EdgeProblemstatus:
		return m.clearedproblemstatus
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ProblemMutation) ClearEdge(name string) error {
	switch name {
	case problem.EdgeUser:
		m.ClearUser()
		return nil
	case problem.EdgeRoom:
		m.ClearRoom()
		return nil
	case problem.EdgeProblemtitle:
		m.ClearProblemtitle()
		return nil
	case problem.EdgeProblemstatus:
		m.ClearProblemstatus()
		return nil
	}
	return fmt.Errorf("unknown Problem unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ProblemMutation) ResetEdge(name string) error {
	switch name {
	case problem.EdgeUser:
		m.ResetUser()
		return nil
	case problem.EdgeRoom:
		m.ResetRoom()
		return nil
	case problem.EdgeProblemtitle:
		m.ResetProblemtitle()
		return nil
	case problem.EdgeProblemstatus:
		m.ResetProblemstatus()
		return nil
	}
	return fmt.Errorf("unknown Problem edge %s", name)
}

// ProblemStatusMutation represents an operation that mutate the ProblemStatusSlice
// nodes in the graph.
type ProblemStatusMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	problemstatus                *string
	clearedFields                map[string]struct{}
	problemstatus2problem        map[int]struct{}
	removedproblemstatus2problem map[int]struct{}
	done                         bool
	oldValue                     func(context.Context) (*ProblemStatus, error)
}

var _ ent.Mutation = (*ProblemStatusMutation)(nil)

// problemstatusOption allows to manage the mutation configuration using functional options.
type problemstatusOption func(*ProblemStatusMutation)

// newProblemStatusMutation creates new mutation for $n.Name.
func newProblemStatusMutation(c config, op Op, opts ...problemstatusOption) *ProblemStatusMutation {
	m := &ProblemStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeProblemStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProblemStatusID sets the id field of the mutation.
func withProblemStatusID(id int) problemstatusOption {
	return func(m *ProblemStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *ProblemStatus
		)
		m.oldValue = func(ctx context.Context) (*ProblemStatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProblemStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProblemStatus sets the old ProblemStatus of the mutation.
func withProblemStatus(node *ProblemStatus) problemstatusOption {
	return func(m *ProblemStatusMutation) {
		m.oldValue = func(context.Context) (*ProblemStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProblemStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProblemStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ProblemStatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetProblemstatus sets the problemstatus field.
func (m *ProblemStatusMutation) SetProblemstatus(s string) {
	m.problemstatus = &s
}

// Problemstatus returns the problemstatus value in the mutation.
func (m *ProblemStatusMutation) Problemstatus() (r string, exists bool) {
	v := m.problemstatus
	if v == nil {
		return
	}
	return *v, true
}

// OldProblemstatus returns the old problemstatus value of the ProblemStatus.
// If the ProblemStatus object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProblemStatusMutation) OldProblemstatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProblemstatus is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProblemstatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProblemstatus: %w", err)
	}
	return oldValue.Problemstatus, nil
}

// ResetProblemstatus reset all changes of the "problemstatus" field.
func (m *ProblemStatusMutation) ResetProblemstatus() {
	m.problemstatus = nil
}

// AddProblemstatus2problemIDs adds the problemstatus2problem edge to Problem by ids.
func (m *ProblemStatusMutation) AddProblemstatus2problemIDs(ids ...int) {
	if m.problemstatus2problem == nil {
		m.problemstatus2problem = make(map[int]struct{})
	}
	for i := range ids {
		m.problemstatus2problem[ids[i]] = struct{}{}
	}
}

// RemoveProblemstatus2problemIDs removes the problemstatus2problem edge to Problem by ids.
func (m *ProblemStatusMutation) RemoveProblemstatus2problemIDs(ids ...int) {
	if m.removedproblemstatus2problem == nil {
		m.removedproblemstatus2problem = make(map[int]struct{})
	}
	for i := range ids {
		m.removedproblemstatus2problem[ids[i]] = struct{}{}
	}
}

// RemovedProblemstatus2problem returns the removed ids of problemstatus2problem.
func (m *ProblemStatusMutation) RemovedProblemstatus2problemIDs() (ids []int) {
	for id := range m.removedproblemstatus2problem {
		ids = append(ids, id)
	}
	return
}

// Problemstatus2problemIDs returns the problemstatus2problem ids in the mutation.
func (m *ProblemStatusMutation) Problemstatus2problemIDs() (ids []int) {
	for id := range m.problemstatus2problem {
		ids = append(ids, id)
	}
	return
}

// ResetProblemstatus2problem reset all changes of the "problemstatus2problem" edge.
func (m *ProblemStatusMutation) ResetProblemstatus2problem() {
	m.problemstatus2problem = nil
	m.removedproblemstatus2problem = nil
}

// Op returns the operation name.
func (m *ProblemStatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProblemStatus).
func (m *ProblemStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ProblemStatusMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.problemstatus != nil {
		fields = append(fields, problemstatus.FieldProblemstatus)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ProblemStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case problemstatus.FieldProblemstatus:
		return m.Problemstatus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ProblemStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case problemstatus.FieldProblemstatus:
		return m.OldProblemstatus(ctx)
	}
	return nil, fmt.Errorf("unknown ProblemStatus field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProblemStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case problemstatus.FieldProblemstatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProblemstatus(v)
		return nil
	}
	return fmt.Errorf("unknown ProblemStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ProblemStatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ProblemStatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProblemStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProblemStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ProblemStatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ProblemStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProblemStatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProblemStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ProblemStatusMutation) ResetField(name string) error {
	switch name {
	case problemstatus.FieldProblemstatus:
		m.ResetProblemstatus()
		return nil
	}
	return fmt.Errorf("unknown ProblemStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ProblemStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.problemstatus2problem != nil {
		edges = append(edges, problemstatus.EdgeProblemstatus2problem)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ProblemStatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case problemstatus.EdgeProblemstatus2problem:
		ids := make([]ent.Value, 0, len(m.problemstatus2problem))
		for id := range m.problemstatus2problem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ProblemStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedproblemstatus2problem != nil {
		edges = append(edges, problemstatus.EdgeProblemstatus2problem)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ProblemStatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case problemstatus.EdgeProblemstatus2problem:
		ids := make([]ent.Value, 0, len(m.removedproblemstatus2problem))
		for id := range m.removedproblemstatus2problem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ProblemStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ProblemStatusMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ProblemStatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ProblemStatus unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ProblemStatusMutation) ResetEdge(name string) error {
	switch name {
	case problemstatus.EdgeProblemstatus2problem:
		m.ResetProblemstatus2problem()
		return nil
	}
	return fmt.Errorf("unknown ProblemStatus edge %s", name)
}

// ProblemTitleMutation represents an operation that mutate the ProblemTitles
// nodes in the graph.
type ProblemTitleMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	problemtitle                *string
	clearedFields               map[string]struct{}
	problemtitle2problem        map[int]struct{}
	removedproblemtitle2problem map[int]struct{}
	done                        bool
	oldValue                    func(context.Context) (*ProblemTitle, error)
}

var _ ent.Mutation = (*ProblemTitleMutation)(nil)

// problemtitleOption allows to manage the mutation configuration using functional options.
type problemtitleOption func(*ProblemTitleMutation)

// newProblemTitleMutation creates new mutation for $n.Name.
func newProblemTitleMutation(c config, op Op, opts ...problemtitleOption) *ProblemTitleMutation {
	m := &ProblemTitleMutation{
		config:        c,
		op:            op,
		typ:           TypeProblemTitle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProblemTitleID sets the id field of the mutation.
func withProblemTitleID(id int) problemtitleOption {
	return func(m *ProblemTitleMutation) {
		var (
			err   error
			once  sync.Once
			value *ProblemTitle
		)
		m.oldValue = func(ctx context.Context) (*ProblemTitle, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProblemTitle.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProblemTitle sets the old ProblemTitle of the mutation.
func withProblemTitle(node *ProblemTitle) problemtitleOption {
	return func(m *ProblemTitleMutation) {
		m.oldValue = func(context.Context) (*ProblemTitle, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProblemTitleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProblemTitleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ProblemTitleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetProblemtitle sets the problemtitle field.
func (m *ProblemTitleMutation) SetProblemtitle(s string) {
	m.problemtitle = &s
}

// Problemtitle returns the problemtitle value in the mutation.
func (m *ProblemTitleMutation) Problemtitle() (r string, exists bool) {
	v := m.problemtitle
	if v == nil {
		return
	}
	return *v, true
}

// OldProblemtitle returns the old problemtitle value of the ProblemTitle.
// If the ProblemTitle object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProblemTitleMutation) OldProblemtitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProblemtitle is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProblemtitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProblemtitle: %w", err)
	}
	return oldValue.Problemtitle, nil
}

// ResetProblemtitle reset all changes of the "problemtitle" field.
func (m *ProblemTitleMutation) ResetProblemtitle() {
	m.problemtitle = nil
}

// AddProblemtitle2problemIDs adds the problemtitle2problem edge to Problem by ids.
func (m *ProblemTitleMutation) AddProblemtitle2problemIDs(ids ...int) {
	if m.problemtitle2problem == nil {
		m.problemtitle2problem = make(map[int]struct{})
	}
	for i := range ids {
		m.problemtitle2problem[ids[i]] = struct{}{}
	}
}

// RemoveProblemtitle2problemIDs removes the problemtitle2problem edge to Problem by ids.
func (m *ProblemTitleMutation) RemoveProblemtitle2problemIDs(ids ...int) {
	if m.removedproblemtitle2problem == nil {
		m.removedproblemtitle2problem = make(map[int]struct{})
	}
	for i := range ids {
		m.removedproblemtitle2problem[ids[i]] = struct{}{}
	}
}

// RemovedProblemtitle2problem returns the removed ids of problemtitle2problem.
func (m *ProblemTitleMutation) RemovedProblemtitle2problemIDs() (ids []int) {
	for id := range m.removedproblemtitle2problem {
		ids = append(ids, id)
	}
	return
}

// Problemtitle2problemIDs returns the problemtitle2problem ids in the mutation.
func (m *ProblemTitleMutation) Problemtitle2problemIDs() (ids []int) {
	for id := range m.problemtitle2problem {
		ids = append(ids, id)
	}
	return
}

// ResetProblemtitle2problem reset all changes of the "problemtitle2problem" edge.
func (m *ProblemTitleMutation) ResetProblemtitle2problem() {
	m.problemtitle2problem = nil
	m.removedproblemtitle2problem = nil
}

// Op returns the operation name.
func (m *ProblemTitleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProblemTitle).
func (m *ProblemTitleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ProblemTitleMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.problemtitle != nil {
		fields = append(fields, problemtitle.FieldProblemtitle)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ProblemTitleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case problemtitle.FieldProblemtitle:
		return m.Problemtitle()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ProblemTitleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case problemtitle.FieldProblemtitle:
		return m.OldProblemtitle(ctx)
	}
	return nil, fmt.Errorf("unknown ProblemTitle field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProblemTitleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case problemtitle.FieldProblemtitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProblemtitle(v)
		return nil
	}
	return fmt.Errorf("unknown ProblemTitle field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ProblemTitleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ProblemTitleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProblemTitleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProblemTitle numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ProblemTitleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ProblemTitleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProblemTitleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProblemTitle nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ProblemTitleMutation) ResetField(name string) error {
	switch name {
	case problemtitle.FieldProblemtitle:
		m.ResetProblemtitle()
		return nil
	}
	return fmt.Errorf("unknown ProblemTitle field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ProblemTitleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.problemtitle2problem != nil {
		edges = append(edges, problemtitle.EdgeProblemtitle2problem)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ProblemTitleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case problemtitle.EdgeProblemtitle2problem:
		ids := make([]ent.Value, 0, len(m.problemtitle2problem))
		for id := range m.problemtitle2problem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ProblemTitleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedproblemtitle2problem != nil {
		edges = append(edges, problemtitle.EdgeProblemtitle2problem)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ProblemTitleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case problemtitle.EdgeProblemtitle2problem:
		ids := make([]ent.Value, 0, len(m.removedproblemtitle2problem))
		for id := range m.removedproblemtitle2problem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ProblemTitleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ProblemTitleMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ProblemTitleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ProblemTitle unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ProblemTitleMutation) ResetEdge(name string) error {
	switch name {
	case problemtitle.EdgeProblemtitle2problem:
		m.ResetProblemtitle2problem()
		return nil
	}
	return fmt.Errorf("unknown ProblemTitle edge %s", name)
}

// RoomMutation represents an operation that mutate the Rooms
// nodes in the graph.
type RoomMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	clearedFields       map[string]struct{}
	user                *int
	cleareduser         bool
	room2problem        map[int]struct{}
	removedroom2problem map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*Room, error)
}

var _ ent.Mutation = (*RoomMutation)(nil)

// roomOption allows to manage the mutation configuration using functional options.
type roomOption func(*RoomMutation)

// newRoomMutation creates new mutation for $n.Name.
func newRoomMutation(c config, op Op, opts ...roomOption) *RoomMutation {
	m := &RoomMutation{
		config:        c,
		op:            op,
		typ:           TypeRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomID sets the id field of the mutation.
func withRoomID(id int) roomOption {
	return func(m *RoomMutation) {
		var (
			err   error
			once  sync.Once
			value *Room
		)
		m.oldValue = func(ctx context.Context) (*Room, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Room.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoom sets the old Room of the mutation.
func withRoom(node *Room) roomOption {
	return func(m *RoomMutation) {
		m.oldValue = func(context.Context) (*Room, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserID sets the user edge to User by id.
func (m *RoomMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *RoomMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *RoomMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *RoomMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *RoomMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddRoom2problemIDs adds the room2problem edge to Problem by ids.
func (m *RoomMutation) AddRoom2problemIDs(ids ...int) {
	if m.room2problem == nil {
		m.room2problem = make(map[int]struct{})
	}
	for i := range ids {
		m.room2problem[ids[i]] = struct{}{}
	}
}

// RemoveRoom2problemIDs removes the room2problem edge to Problem by ids.
func (m *RoomMutation) RemoveRoom2problemIDs(ids ...int) {
	if m.removedroom2problem == nil {
		m.removedroom2problem = make(map[int]struct{})
	}
	for i := range ids {
		m.removedroom2problem[ids[i]] = struct{}{}
	}
}

// RemovedRoom2problem returns the removed ids of room2problem.
func (m *RoomMutation) RemovedRoom2problemIDs() (ids []int) {
	for id := range m.removedroom2problem {
		ids = append(ids, id)
	}
	return
}

// Room2problemIDs returns the room2problem ids in the mutation.
func (m *RoomMutation) Room2problemIDs() (ids []int) {
	for id := range m.room2problem {
		ids = append(ids, id)
	}
	return
}

// ResetRoom2problem reset all changes of the "room2problem" edge.
func (m *RoomMutation) ResetRoom2problem() {
	m.room2problem = nil
	m.removedroom2problem = nil
}

// Op returns the operation name.
func (m *RoomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Room).
func (m *RoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Room field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Room numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Room nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, room.EdgeUser)
	}
	if m.room2problem != nil {
		edges = append(edges, room.EdgeRoom2problem)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case room.EdgeRoom2problem:
		ids := make([]ent.Value, 0, len(m.room2problem))
		for id := range m.room2problem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedroom2problem != nil {
		edges = append(edges, room.EdgeRoom2problem)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeRoom2problem:
		ids := make([]ent.Value, 0, len(m.removedroom2problem))
		for id := range m.removedroom2problem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, room.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomMutation) EdgeCleared(name string) bool {
	switch name {
	case room.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomMutation) ClearEdge(name string) error {
	switch name {
	case room.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Room unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomMutation) ResetEdge(name string) error {
	switch name {
	case room.EdgeUser:
		m.ResetUser()
		return nil
	case room.EdgeRoom2problem:
		m.ResetRoom2problem()
		return nil
	}
	return fmt.Errorf("unknown Room edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	email               *string
	clearedFields       map[string]struct{}
	user2room           map[int]struct{}
	removeduser2room    map[int]struct{}
	user2problem        map[int]struct{}
	removeduser2problem map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the email field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// AddUser2roomIDs adds the user2room edge to Room by ids.
func (m *UserMutation) AddUser2roomIDs(ids ...int) {
	if m.user2room == nil {
		m.user2room = make(map[int]struct{})
	}
	for i := range ids {
		m.user2room[ids[i]] = struct{}{}
	}
}

// RemoveUser2roomIDs removes the user2room edge to Room by ids.
func (m *UserMutation) RemoveUser2roomIDs(ids ...int) {
	if m.removeduser2room == nil {
		m.removeduser2room = make(map[int]struct{})
	}
	for i := range ids {
		m.removeduser2room[ids[i]] = struct{}{}
	}
}

// RemovedUser2room returns the removed ids of user2room.
func (m *UserMutation) RemovedUser2roomIDs() (ids []int) {
	for id := range m.removeduser2room {
		ids = append(ids, id)
	}
	return
}

// User2roomIDs returns the user2room ids in the mutation.
func (m *UserMutation) User2roomIDs() (ids []int) {
	for id := range m.user2room {
		ids = append(ids, id)
	}
	return
}

// ResetUser2room reset all changes of the "user2room" edge.
func (m *UserMutation) ResetUser2room() {
	m.user2room = nil
	m.removeduser2room = nil
}

// AddUser2problemIDs adds the user2problem edge to Problem by ids.
func (m *UserMutation) AddUser2problemIDs(ids ...int) {
	if m.user2problem == nil {
		m.user2problem = make(map[int]struct{})
	}
	for i := range ids {
		m.user2problem[ids[i]] = struct{}{}
	}
}

// RemoveUser2problemIDs removes the user2problem edge to Problem by ids.
func (m *UserMutation) RemoveUser2problemIDs(ids ...int) {
	if m.removeduser2problem == nil {
		m.removeduser2problem = make(map[int]struct{})
	}
	for i := range ids {
		m.removeduser2problem[ids[i]] = struct{}{}
	}
}

// RemovedUser2problem returns the removed ids of user2problem.
func (m *UserMutation) RemovedUser2problemIDs() (ids []int) {
	for id := range m.removeduser2problem {
		ids = append(ids, id)
	}
	return
}

// User2problemIDs returns the user2problem ids in the mutation.
func (m *UserMutation) User2problemIDs() (ids []int) {
	for id := range m.user2problem {
		ids = append(ids, id)
	}
	return
}

// ResetUser2problem reset all changes of the "user2problem" edge.
func (m *UserMutation) ResetUser2problem() {
	m.user2problem = nil
	m.removeduser2problem = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user2room != nil {
		edges = append(edges, user.EdgeUser2room)
	}
	if m.user2problem != nil {
		edges = append(edges, user.EdgeUser2problem)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUser2room:
		ids := make([]ent.Value, 0, len(m.user2room))
		for id := range m.user2room {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUser2problem:
		ids := make([]ent.Value, 0, len(m.user2problem))
		for id := range m.user2problem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeduser2room != nil {
		edges = append(edges, user.EdgeUser2room)
	}
	if m.removeduser2problem != nil {
		edges = append(edges, user.EdgeUser2problem)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUser2room:
		ids := make([]ent.Value, 0, len(m.removeduser2room))
		for id := range m.removeduser2room {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUser2problem:
		ids := make([]ent.Value, 0, len(m.removeduser2problem))
		for id := range m.removeduser2problem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUser2room:
		m.ResetUser2room()
		return nil
	case user.EdgeUser2problem:
		m.ResetUser2problem()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
