basePath: /api/v1
definitions:
  controllers.Problem:
    properties:
      added:
        type: string
      probleminfo:
        type: string
      problemstatus:
        type: integer
      problemtitle:
        type: integer
      room:
        type: integer
      user:
        type: integer
    type: object
  ent.Problem:
    properties:
      adddate:
        description: Adddate holds the value of the "adddate" field.
        type: string
      edges:
        $ref: '#/definitions/ent.ProblemEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ProblemQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      probleminfo:
        description: Probleminfo holds the value of the "probleminfo" field.
        type: string
    type: object
  ent.ProblemEdges:
    properties:
      problemstatus:
        $ref: '#/definitions/ent.ProblemStatus'
        description: Problemstatus holds the value of the problemstatus edge.
        type: object
      problemtitle:
        $ref: '#/definitions/ent.ProblemTitle'
        description: Problemtitle holds the value of the problemtitle edge.
        type: object
      room:
        $ref: '#/definitions/ent.Room'
        description: Room holds the value of the room edge.
        type: object
      user:
        $ref: '#/definitions/ent.User'
        description: User holds the value of the user edge.
        type: object
    type: object
  ent.ProblemStatus:
    properties:
      edges:
        $ref: '#/definitions/ent.ProblemStatusEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ProblemStatusQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      problemstatus:
        description: Problemstatus holds the value of the "problemstatus" field.
        type: string
    type: object
  ent.ProblemStatusEdges:
    properties:
      problemstatus2problem:
        description: Problemstatus2problem holds the value of the problemstatus2problem edge.
        items:
          $ref: '#/definitions/ent.Problem'
        type: array
    type: object
  ent.ProblemTitle:
    properties:
      edges:
        $ref: '#/definitions/ent.ProblemTitleEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ProblemTitleQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      problemtitle:
        description: Problemtitle holds the value of the "problemtitle" field.
        type: string
    type: object
  ent.ProblemTitleEdges:
    properties:
      problemtitle2problem:
        description: Problemtitle2problem holds the value of the problemtitle2problem edge.
        items:
          $ref: '#/definitions/ent.Problem'
        type: array
    type: object
  ent.Room:
    properties:
      edges:
        $ref: '#/definitions/ent.RoomEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the RoomQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.RoomEdges:
    properties:
      room2problem:
        description: Room2problem holds the value of the room2problem edge.
        items:
          $ref: '#/definitions/ent.Problem'
        type: array
      user:
        $ref: '#/definitions/ent.User'
        description: User holds the value of the user edge.
        type: object
    type: object
  ent.User:
    properties:
      edges:
        $ref: '#/definitions/ent.UserEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the UserQuery when eager-loading is set.
        type: object
      email:
        description: Email holds the value of the "email" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
    type: object
  ent.UserEdges:
    properties:
      user2problem:
        description: User2problem holds the value of the user2problem edge.
        items:
          $ref: '#/definitions/ent.Problem'
        type: array
      user2room:
        description: User2room holds the value of the user2room edge.
        items:
          $ref: '#/definitions/ent.Room'
        type: array
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API Playlist Vidoe
  version: "1.0"
paths:
  /Room:
    get:
      description: list room entities
      operationId: list-room
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Room'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List room entities
    post:
      consumes:
      - application/json
      description: Create room
      operationId: create-room
      parameters:
      - description: Room entity
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/ent.Room'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Room'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create room
  /Room/{id}:
    get:
      description: get room by ID
      operationId: get-room
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Room'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a room entity by ID
  /problem:
    get:
      description: list problem entities
      operationId: list-problem
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Problem'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List problem entities
    post:
      consumes:
      - application/json
      description: Create problem
      operationId: create-problem
      parameters:
      - description: Problem entity
        in: body
        name: problem
        required: true
        schema:
          $ref: '#/definitions/controllers.Problem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Problem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create problem
  /problemstatus:
    get:
      description: list problemstatus entities
      operationId: list problemstatus
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.ProblemStatus'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List problemstatus entities
    post:
      consumes:
      - application/json
      description: Create problemstatus
      operationId: create problemstatus
      parameters:
      - description: ProblemStatus entity
        in: body
        name: problemstatus
        required: true
        schema:
          $ref: '#/definitions/ent.ProblemStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.ProblemStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create problemstatus
  /problemstatus/{id}:
    delete:
      description: get problemstatus by ID
      operationId: delete problemstatus
      parameters:
      - description: ProblemStatus ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a problemstatus entity by ID
    get:
      description: get problemstatus by ID
      operationId: get problemstatus
      parameters:
      - description: ProblemStatus ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.ProblemStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a problemstatus entity by ID
    put:
      consumes:
      - application/json
      description: update problemstatus by ID
      operationId: update problemstatus
      parameters:
      - description: ProblemStatus ID
        in: path
        name: id
        required: true
        type: integer
      - description: ProblemStatus entity
        in: body
        name: problemstatus
        required: true
        schema:
          $ref: '#/definitions/ent.ProblemStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.ProblemStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a problemstatus entity by ID
  /problemtitles:
    get:
      description: list problemtitle entities
      operationId: list problemtitle
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.ProblemTitle'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List problemtitle entities
    post:
      consumes:
      - application/json
      description: Create problemtitle
      operationId: create problemtitle
      parameters:
      - description: ProblemTitle entity
        in: body
        name: problemtitle
        required: true
        schema:
          $ref: '#/definitions/ent.ProblemTitle'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.ProblemTitle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create problemtitle
  /problemtitles/{id}:
    delete:
      description: get problemtitle by ID
      operationId: delete problemtitle
      parameters:
      - description: ProblemTitle ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a problemtitle entity by ID
    get:
      description: get problemtitle by ID
      operationId: get problemtitle
      parameters:
      - description: ProblemTitle ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.ProblemTitle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a problemtitle entity by ID
    put:
      consumes:
      - application/json
      description: update problemtitle by ID
      operationId: update problemtitle
      parameters:
      - description: ProblemTitle ID
        in: path
        name: id
        required: true
        type: integer
      - description: ProblemTitle entity
        in: body
        name: problemtitle
        required: true
        schema:
          $ref: '#/definitions/ent.ProblemTitle'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.ProblemTitle'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a problemtitle entity by ID
  /users:
    get:
      description: list user entities
      operationId: list-user
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List user entities
    post:
      consumes:
      - application/json
      description: Create user
      operationId: create-user
      parameters:
      - description: User entity
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create user
  /users/{id}:
    delete:
      description: get user by ID
      operationId: delete-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a user entity by ID
    get:
      description: get user by ID
      operationId: get-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a user entity by ID
    put:
      consumes:
      - application/json
      description: update user by ID
      operationId: update-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User entity
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a user entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
