/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersProblem,
    ControllersProblemFromJSON,
    ControllersProblemToJSON,
    EntProblem,
    EntProblemFromJSON,
    EntProblemToJSON,
    EntProblemStatus,
    EntProblemStatusFromJSON,
    EntProblemStatusToJSON,
    EntProblemTitle,
    EntProblemTitleFromJSON,
    EntProblemTitleToJSON,
    EntRoom,
    EntRoomFromJSON,
    EntRoomToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateProblemRequest {
    problem: ControllersProblem;
}

export interface CreateProblemstatusRequest {
    problemstatus: EntProblemStatus;
}

export interface CreateProblemtitleRequest {
    problemtitle: EntProblemTitle;
}

export interface CreateRoomRequest {
    room: EntRoom;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteProblemstatusRequest {
    id: number;
}

export interface DeleteProblemtitleRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetProblemstatusRequest {
    id: number;
}

export interface GetProblemtitleRequest {
    id: number;
}

export interface GetRoomRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListProblemRequest {
    limit?: number;
    offset?: number;
}

export interface ListProblemstatusRequest {
    limit?: number;
    offset?: number;
}

export interface ListProblemtitleRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateProblemstatusRequest {
    id: number;
    problemstatus: EntProblemStatus;
}

export interface UpdateProblemtitleRequest {
    id: number;
    problemtitle: EntProblemTitle;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create problem
     * Create problem
     */
    async createProblemRaw(requestParameters: CreateProblemRequest): Promise<runtime.ApiResponse<ControllersProblem>> {
        if (requestParameters.problem === null || requestParameters.problem === undefined) {
            throw new runtime.RequiredError('problem','Required parameter requestParameters.problem was null or undefined when calling createProblem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/problem`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersProblemToJSON(requestParameters.problem),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersProblemFromJSON(jsonValue));
    }

    /**
     * Create problem
     * Create problem
     */
    async createProblem(requestParameters: CreateProblemRequest): Promise<ControllersProblem> {
        const response = await this.createProblemRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create problemstatus
     * Create problemstatus
     */
    async createProblemstatusRaw(requestParameters: CreateProblemstatusRequest): Promise<runtime.ApiResponse<EntProblemStatus>> {
        if (requestParameters.problemstatus === null || requestParameters.problemstatus === undefined) {
            throw new runtime.RequiredError('problemstatus','Required parameter requestParameters.problemstatus was null or undefined when calling createProblemstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/problemstatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntProblemStatusToJSON(requestParameters.problemstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProblemStatusFromJSON(jsonValue));
    }

    /**
     * Create problemstatus
     * Create problemstatus
     */
    async createProblemstatus(requestParameters: CreateProblemstatusRequest): Promise<EntProblemStatus> {
        const response = await this.createProblemstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create problemtitle
     * Create problemtitle
     */
    async createProblemtitleRaw(requestParameters: CreateProblemtitleRequest): Promise<runtime.ApiResponse<EntProblemTitle>> {
        if (requestParameters.problemtitle === null || requestParameters.problemtitle === undefined) {
            throw new runtime.RequiredError('problemtitle','Required parameter requestParameters.problemtitle was null or undefined when calling createProblemtitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/problemtitles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntProblemTitleToJSON(requestParameters.problemtitle),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProblemTitleFromJSON(jsonValue));
    }

    /**
     * Create problemtitle
     * Create problemtitle
     */
    async createProblemtitle(requestParameters: CreateProblemtitleRequest): Promise<EntProblemTitle> {
        const response = await this.createProblemtitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create room
     * Create room
     */
    async createRoomRaw(requestParameters: CreateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling createRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Room`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * Create room
     * Create room
     */
    async createRoom(requestParameters: CreateRoomRequest): Promise<EntRoom> {
        const response = await this.createRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get problemstatus by ID
     * Delete a problemstatus entity by ID
     */
    async deleteProblemstatusRaw(requestParameters: DeleteProblemstatusRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProblemstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/problemstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get problemstatus by ID
     * Delete a problemstatus entity by ID
     */
    async deleteProblemstatus(requestParameters: DeleteProblemstatusRequest): Promise<object> {
        const response = await this.deleteProblemstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get problemtitle by ID
     * Delete a problemtitle entity by ID
     */
    async deleteProblemtitleRaw(requestParameters: DeleteProblemtitleRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProblemtitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/problemtitles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get problemtitle by ID
     * Delete a problemtitle entity by ID
     */
    async deleteProblemtitle(requestParameters: DeleteProblemtitleRequest): Promise<object> {
        const response = await this.deleteProblemtitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get problemstatus by ID
     * Get a problemstatus entity by ID
     */
    async getProblemstatusRaw(requestParameters: GetProblemstatusRequest): Promise<runtime.ApiResponse<EntProblemStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProblemstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/problemstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProblemStatusFromJSON(jsonValue));
    }

    /**
     * get problemstatus by ID
     * Get a problemstatus entity by ID
     */
    async getProblemstatus(requestParameters: GetProblemstatusRequest): Promise<EntProblemStatus> {
        const response = await this.getProblemstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get problemtitle by ID
     * Get a problemtitle entity by ID
     */
    async getProblemtitleRaw(requestParameters: GetProblemtitleRequest): Promise<runtime.ApiResponse<EntProblemTitle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProblemtitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/problemtitles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProblemTitleFromJSON(jsonValue));
    }

    /**
     * get problemtitle by ID
     * Get a problemtitle entity by ID
     */
    async getProblemtitle(requestParameters: GetProblemtitleRequest): Promise<EntProblemTitle> {
        const response = await this.getProblemtitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoomRaw(requestParameters: GetRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Room/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoom(requestParameters: GetRoomRequest): Promise<EntRoom> {
        const response = await this.getRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list problem entities
     * List problem entities
     */
    async listProblemRaw(requestParameters: ListProblemRequest): Promise<runtime.ApiResponse<Array<EntProblem>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/problem`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntProblemFromJSON));
    }

    /**
     * list problem entities
     * List problem entities
     */
    async listProblem(requestParameters: ListProblemRequest): Promise<Array<EntProblem>> {
        const response = await this.listProblemRaw(requestParameters);
        return await response.value();
    }

    /**
     * list problemstatus entities
     * List problemstatus entities
     */
    async listProblemstatusRaw(requestParameters: ListProblemstatusRequest): Promise<runtime.ApiResponse<Array<EntProblemStatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/problemstatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntProblemStatusFromJSON));
    }

    /**
     * list problemstatus entities
     * List problemstatus entities
     */
    async listProblemstatus(requestParameters: ListProblemstatusRequest): Promise<Array<EntProblemStatus>> {
        const response = await this.listProblemstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list problemtitle entities
     * List problemtitle entities
     */
    async listProblemtitleRaw(requestParameters: ListProblemtitleRequest): Promise<runtime.ApiResponse<Array<EntProblemTitle>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/problemtitles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntProblemTitleFromJSON));
    }

    /**
     * list problemtitle entities
     * List problemtitle entities
     */
    async listProblemtitle(requestParameters: ListProblemtitleRequest): Promise<Array<EntProblemTitle>> {
        const response = await this.listProblemtitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoomRaw(requestParameters: ListRoomRequest): Promise<runtime.ApiResponse<Array<EntRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Room`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomFromJSON));
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoom(requestParameters: ListRoomRequest): Promise<Array<EntRoom>> {
        const response = await this.listRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update problemstatus by ID
     * Update a problemstatus entity by ID
     */
    async updateProblemstatusRaw(requestParameters: UpdateProblemstatusRequest): Promise<runtime.ApiResponse<EntProblemStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProblemstatus.');
        }

        if (requestParameters.problemstatus === null || requestParameters.problemstatus === undefined) {
            throw new runtime.RequiredError('problemstatus','Required parameter requestParameters.problemstatus was null or undefined when calling updateProblemstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/problemstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntProblemStatusToJSON(requestParameters.problemstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProblemStatusFromJSON(jsonValue));
    }

    /**
     * update problemstatus by ID
     * Update a problemstatus entity by ID
     */
    async updateProblemstatus(requestParameters: UpdateProblemstatusRequest): Promise<EntProblemStatus> {
        const response = await this.updateProblemstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * update problemtitle by ID
     * Update a problemtitle entity by ID
     */
    async updateProblemtitleRaw(requestParameters: UpdateProblemtitleRequest): Promise<runtime.ApiResponse<EntProblemTitle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProblemtitle.');
        }

        if (requestParameters.problemtitle === null || requestParameters.problemtitle === undefined) {
            throw new runtime.RequiredError('problemtitle','Required parameter requestParameters.problemtitle was null or undefined when calling updateProblemtitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/problemtitles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntProblemTitleToJSON(requestParameters.problemtitle),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProblemTitleFromJSON(jsonValue));
    }

    /**
     * update problemtitle by ID
     * Update a problemtitle entity by ID
     */
    async updateProblemtitle(requestParameters: UpdateProblemtitleRequest): Promise<EntProblemTitle> {
        const response = await this.updateProblemtitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
